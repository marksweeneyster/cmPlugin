
ext.cmakeFlags = "-DCMAKE_BUILD_TYPE=Debug -DVERSION=7"
model {
}

apply plugin: 'maven-publish'
publishing {
    publications {
        mavenAndroid(MavenPublication) {
            //from components.android
        }
    }
}

class CmPlugin extends RuleSource {   
    @ComponentType
    void registerComponent(TypeBuilder<CmakeComponent> builder) {
    }

    @ComponentType
    void registerBinary(TypeBuilder<CmakeBinary> builder) {
    }

    @Defaults
    void setDefaultLibraries(ModelMap<CmakeComponent> libraries) {
        libraries.create('android') {
            title = 'android'
            arches = ['arm','arm64','x86','x86_64']
        }
        libraries.create('ios') {
            title = 'ios'
            arches = ['armv7','armv7s','arm64','x86_64','i386']
        }
        libraries.create('tizen') {
            title = 'tizen'
            arches = ['armv7l','x86']
        }
        libraries.create('native') {
            title = 'native'
            arches = ['x86_64']
        }
        libraries.create('linux') {
            title = 'linux'
            arches = ['aarch64','armv7l']
        }
    }

    @Defaults
    void setLibraryDefaults(@Each CmakeComponent library) {
        library.generator = 'Ninja'
        library.cmListsPath = '../../'
        library.toolchainFile = ''
    }
    @Defaults
    void setDefaults(@Each CmakeBinary cmakeBinary) {
        cmakeBinary.generator = 'Ninja'
        cmakeBinary.cmListsPath = '../../'
        cmakeBinary.toolchainFile = ''
        cmakeBinary.flags = ''
    }

    @ComponentBinaries
    void createBinariesForBinaryComponent(ModelMap<CmakeBinary> binaries, CmakeComponent library) {
        library.arches.each { architecture->
            binaries.create(architecture) {
                arch = architecture;
                os = library.name 
                toolchainFile = library.toolchainFile ?: ''  
            }
        }
    }

    @BinaryTasks
    void createCmakeTasks(ModelMap<Task> tasks, CmakeBinary binary) {

        String makr = binary.tasks.taskName("mkdirs", "build")
        String genr = binary.tasks.taskName("generate", "build")
        String runr = binary.tasks.taskName("run", "build")
        String inst = binary.tasks.taskName("install", "build")

        tasks.create(makr,PrebuildTask){
            it.operatingSystem = binary.os;
            it.architecture = binary.arch;
        }
        tasks.create(genr, CmGenerateTask){
            it.operatingSystem = binary.os;
            it.architecture = binary.arch;
            it.generator    = binary.generator;
            it.cmListsPath  = "${it.project.rootDir}"
            it.toolchainFile = binary.toolchainFile.length() > 0 ? "${it.project.rootDir}/${binary.toolchainFile}" : ''
            it.installPath  = "${it.project.buildDir}/platform/${it.operatingSystem}/${it.architecture}"

            if (it.project.ext.has('cmakeFlags')) {
                it.flags = it.project.ext.get('cmakeFlags')
            } else {
                it.flags = ''
            }
            it.flags += ' ' + binary.flags;

        }
        tasks.create(runr, CmBuildTask){
            it.operatingSystem = binary.os;
            it.architecture = binary.arch;
        }
        tasks.create(inst, NinjaInstallTask){
            it.operatingSystem = binary.os;
            it.architecture = binary.arch;
        }

        tasks.get(genr).dependsOn(makr)
        tasks.get(runr).dependsOn(genr)
        tasks.get(inst).dependsOn(runr)
     }
}

class PrebuildTask extends DefaultTask {
    @Input String operatingSystem 
    @Input String architecture

    @TaskAction
    void makeDirectory() {
        new File("${project.buildDir}/$operatingSystem/$architecture").mkdirs()
    }
}

class CmGenerateTask extends Exec {
    @Input String operatingSystem 
    @Input String architecture
    @Input String generator    
    @Input String cmListsPath    
    @Input String toolchainFile    
    @Input String installPath    
    @Input String flags    
    
    CmGenerateTask() {
        executable 'cmake'
    }
	
    @Override
    protected void exec() {
       List<String> flagList = flags.split("\\s+")

        workingDir = "${project.buildDir}/$operatingSystem/$architecture"
        if (toolchainFile.length() == 0) {
            String s1 = "-D" + operatingSystem.toUpperCase() + "=1"
            String s2 = "-DARCH=$architecture"
            String s3 = "-DCMAKE_INSTALL_PREFIX=$installPath"

            List<String> flagList0 = ["-G$generator", "$cmListsPath", s1, s2, s3]
            flagList0.addAll(flagList)
            args = flagList0
        } else {
            String osFlag = "-D" + operatingSystem.toUpperCase() + "=1 ";
            flags = "-DCMAKE_TOOLCHAIN_FILE=$toolchainFile -DARCH=$architecture " + flags + osFlag
            args = ["-G$generator", flags, "$cmListsPath"]
        }
        super.exec()
    }
}

class CmBuildTask extends Exec {
    @Input String operatingSystem 
    @Input String architecture
    
    CmBuildTask() {
        executable 'cmake'
    }
	
    @Override
    protected void exec() {
	workingDir = "${project.buildDir}/$operatingSystem/$architecture"
        args = ['--build','.']
        super.exec()
    }
}

class NinjaInstallTask extends Exec {
    @Input String operatingSystem 
    @Input String architecture
    
    NinjaInstallTask() {
        executable 'ninja'
    }
	
    @Override
    protected void exec() {
	workingDir = "${project.buildDir}/$operatingSystem/$architecture"
        args = ['install']
        super.exec()
    }
}
////////    COMPONENT STUFF

@Managed
interface CmakeComponent extends LibrarySpec {
    String getTitle()
    void setTitle(String title)

    List<String> getArches()
    void setArches(List<String> arches)

    String getGenerator()
    void setGenerator(String generator)

    String getCmListsPath()
    void setCmListsPath(String cmListsPath)

    String getToolchainFile()
    void setToolchainFile(String toolchainFile)
}

@Managed
interface CmakeBinary extends BinarySpec {

    String getArch()
    void setArch(String arch)

    String getCmListsPath()
    void setCmListsPath(String cmListsPath)

    String getGenerator()
    void setGenerator(String generator)

    String getFlags()
    void setFlags(String flags)

    String getOs()
    void setOs(String title)

    String getToolchainFile()
    void setToolchainFile(String toolchainFile)
}

apply plugin: CmPlugin

