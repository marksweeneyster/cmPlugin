model {
    platforms {
        ninja(Platform) {
            generator = 'Ninja'
            cmListsPath = './../../'
        }
        nmake(Platform) {
            generator = 'NMake Makefiles'
            cmListsPath = './../../'
        }
        make(Platform) {
            generator = 'Unix Makefiles'
            cmListsPath = './../../'
        }
    }
}

class CmPlugin extends RuleSource {   
    @Model
    void platforms(ModelMap<Platform> platforms) { }

    /**
    * Rule to create tasks that will print the cmake command 
    */ 
    @Mutate
    void createPrintArgsTask(ModelMap<Task> tasks, ModelMap<Platform> printargs) {
        printargs.keySet().each { name -> 
            tasks.create("${name}Platform", PrintArgs) {
                platform = printargs[name]
            }
        }
    }

    /**
    * Rule to create tasks that will generate builds  
    */ 
    @Mutate
    void createCmGenerateTask(ModelMap<Task> tasks, ModelMap<Platform> generators) {
        generators.keySet().each { name -> 
            tasks.create("${name}Generate", CmGenerateTask) {
                platform = generators[name]
            }
        }
    }

    /**
    * Rule to create tasks that will make subdirectories for the respective build platforms   
    */ 
    @Mutate
    void createPrebuildTask(ModelMap<Task> tasks, ModelMap<Platform> prebuilders) {
        prebuilders.keySet().each { name -> 
            tasks.create("${name}PreBuild", prebuildTask) {
                platform = prebuilders[name]
            }
        }
    }

    /**
    * Rule to create tasks that will run 'cmake --build' for the respective build platforms   
    */ 
    @Mutate
    void createBuildTask(ModelMap<Task> tasks, ModelMap<Platform> builders) {
        builders.keySet().each { name -> 
            tasks.create("${name}Build", CmBuildTask) {
                platform = builders[name]
            }
        }
    }

    /**
    * Rule to set dependencies for tasks created by the above Rules    
    */ 
    @Finalize
    void printTasks(ModelMap<Task> tasks, ModelMap<Platform> platforms) {
        println "" 
        platforms.keySet().each { name->
            tasks.get("${name}Generate").dependsOn("${name}PreBuild")
            tasks.get("${name}Build").dependsOn("${name}Generate")
        }
    }

}

@Managed
interface Platform {
    String getGenerator()
    void setGenerator(String generator)
    String getCmListsPath()
    void setCmListsPath(String cmListsPath)
}

class PrintArgs extends DefaultTask {
    Platform platform
    
    @TaskAction
    void printCommand() {
        println "cmake -G$platform.generator $platform.cmListsPath"
    }
}

class prebuildTask extends DefaultTask {
    Platform platform
    
    @TaskAction
    void makeDirectory() {
	    new File("build/$platform.generator").mkdirs()  
    }
}

class CmGenerateTask extends Exec {
    Platform platform
    
    CmGenerateTask() {
        executable 'cmake'
    }
	
    @Override
    protected void exec() {
	
	workingDir = "build/$platform.generator"
        args = ["-G$platform.generator", "$platform.cmListsPath"]
        super.exec()
    }
}

class CmBuildTask extends Exec {
    Platform platform
    
    CmBuildTask() {
        executable 'cmake'
    }
	
    @Override
    protected void exec() {
	workingDir = "build/$platform.generator"
        args = ['--build','.']
        super.exec()
    }
}

apply plugin: CmPlugin
